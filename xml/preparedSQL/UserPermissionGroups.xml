<talnet type="preparedSQL">
	<preparedSql name="getUserPermissionGroup">
		<description>returns a record of relation between a permission group and a user in the group</description>
		<arguments>
			<argument id="1">the user name</argument>
			<argument id="2">the group name</argument>
		</arguments>
		<columns>
			<column name="USERNAME">the user name</column>
			<column name="PERMISSION_NAME">the permission group name</column>
		</columns>
		<query>SELECT USERS.USERNAME, PERMISSION_GROUPS.PERMISSION_NAME FROM USERS
RIGHT JOIN USER_PERMISSIONS ON USERS.USER_ID = USER_PERMISSIONS.USER_ID
RIGHT JOIN PERMISSION_GROUPS ON USER_PERMISSIONS.PERMISSIONGROUP_ID = PERMISSION_GROUPS.PERMISSIONGROUP_ID
WHERE USERS.USERNAME = ? AND PERMISSION_GROUPS.PERMISSION_NAME = ?</query>
	</preparedSql>
	<preparedSql name="getUserPermissionGroups">
		<description>returns a list of groups that a user is in them, adding the group info</description>
		<arguments>
			<argument id="1">the user name</argument>
		</arguments>
		<columns>
			<column name="USER_ID">the user id</column>
			<column name="USERNAME">the username</column>
			<column name="PASSWORD">the user md5 hashed password</column>
			<column name="FIRST_NAME">the user first name</column>
			<column name="LAST_NAME">the user last name</column>
			<column name="DISPLAY_NAME">the user display name (nuckname)</column>
			<column name="EMAIL">the user email</column>
			<column name="ROOM_NUM">the user room number</column>
			<column name="YEAR">the user year</column>
			<column name="PHONE_PRE">the user phone prefix</column>
			<column name="PHONE_SUF">the user phone suffix</column>
			<column name="PERMISSIONGROUP_ID">the group id</column>
			<column name="PERMISSION_NAME">the group name</column>
			<column name="PERMISSIONGROUP_DESCRIPTION">the group description</column>
			<column name="PERMISSION_GROUP_ADMIN">the group admi user id</column>
		</columns>
		<query>SELECT USERS.*, PERMISSION_GROUPS.* FROM USERS
RIGHT JOIN USER_PERMISSIONS ON USERS.USER_ID = USER_PERMISSIONS.USER_ID
RIGHT JOIN PERMISSION_GROUPS ON USER_PERMISSIONS.PERMISSIONGROUP_ID = PERMISSION_GROUPS.PERMISSIONGROUP_ID
WHERE USERS.USERNAME = ?</query>
	</preparedSql>
	<preparedSql name="getUserPermissionGroupsAdmin">
		<description>returns a list of all permission groups admin that their admin user is a given one</description>
		<arguments>
			<argument id="1">the given user name</argument>
		</arguments>
		<columns>
			<column name="requestedUser">the requested user name</column>
			<column name="PERMISSION_NAME">the permission group name</column>
			<column name="PERMISSIONGROUP_DESCRIPTION">the permission group description</column>
			<column name="GROUPADMIN_USERNAME">the group admin user name (will be the one given)</column>
		</columns>
		<query>SELECT USERS.USERNAME AS requestedUser, PERMISSION_GROUPS.PERMISSION_NAME,PERMISSION_GROUPS.PERMISSIONGROUP_DESCRIPTION, (SELECT USERNAME FROM USERS WHERE USER_ID = PERMISSION_GROUPS.PERMISSION_GROUP_ADMIN) AS GROUPADMIN_USERNAME FROM USERS
RIGHT JOIN USER_PERMISSIONS ON USERS.USER_ID = USER_PERMISSIONS.USER_ID
RIGHT JOIN PERMISSION_GROUPS ON USER_PERMISSIONS.PERMISSIONGROUP_ID = PERMISSION_GROUPS.PERMISSIONGROUP_ID
WHERE USERS.USERNAME = ? HAVING requestedUser = GROUPADMIN_USERNAME</query>
	</preparedSql>
	<preparedSql name="getUserPermissionGroupNoPass">
		<description>returns a list of groups a given user is in</description>
		<arguments>
			<argument id="1">the user name</argument>
		</arguments>
		<columns>
			<column name="PERMISSION_NAME">the permission group name</column>
			<column name="PERMISSIONGROUP_DESCRIPTION">the permission group description</column>
			<column name="GROUPADMIN_USERNAME">the group admin user name</column>
		</columns>
		<query>SELECT PERMISSION_GROUPS.PERMISSION_NAME,PERMISSION_GROUPS.PERMISSIONGROUP_DESCRIPTION, (SELECT USERNAME FROM USERS WHERE USER_ID = PERMISSION_GROUPS.PERMISSION_GROUP_ADMIN) AS GROUPADMIN_USERNAME FROM USERS
RIGHT JOIN USER_PERMISSIONS ON USERS.USER_ID = USER_PERMISSIONS.USER_ID
RIGHT JOIN PERMISSION_GROUPS ON USER_PERMISSIONS.PERMISSIONGROUP_ID = PERMISSION_GROUPS.PERMISSIONGROUP_ID
WHERE USERS.USERNAME = ?</query>
	</preparedSql>
	<preparedSql name="getUserInfoWithPermission">
		<description>returns a list of users in a given permission group</description>
		<arguments>
			<argument id="1">the permission group name</argument>
		</arguments>
		<columns>
			<column name="USER_ID">the user id</column>
			<column name="USERNAME">the username</column>
			<column name="FIRST_NAME">the user first name</column>
			<column name="LAST_NAME">the user last name</column>
			<column name="NAME">the user full name</column>
			<column name="DISPLAY_NAME">the user display name (nuckname)</column>
			<column name="EMAIL">the user email</column>
			<column name="ROOM_NUM">the user room number</column>
			<column name="YEAR">the user year</column>
			<column name="PHONE_PRE">the user phone prefix</column>
			<column name="PHONE_SUF">the user phone suffix</column>
		</columns>
		<query>SELECT USERS.USER_ID, USERS.USERNAME, USERS.FIRST_NAME, USERS.LAST_NAME, CONCAT_WS(' ',USERS.FIRST_NAME,USERS.LAST_NAME) AS NAME, USERS.EMAIL, USERS.DATE_REGISTERED, USERS.YEAR, USERS.DISPLAY_NAME, USERS.ROOM_NUM, USERS.PHONE_PRE, USERS.PHONE_SUF FROM USERS
RIGHT JOIN USER_PERMISSIONS ON USERS.USER_ID = USER_PERMISSIONS.USER_ID
RIGHT JOIN PERMISSION_GROUPS ON USER_PERMISSIONS.PERMISSIONGROUP_ID = PERMISSION_GROUPS.PERMISSIONGROUP_ID
WHERE PERMISSION_GROUPS.PERMISSION_NAME = ?</query>
	</preparedSql>
	<preparedSql name="AddUserPermissionGroup">
		<description>assigns a user to an existing permission group</description>
		<arguments>
			<argument id="1">the user name</argument>
			<argument id="2">the permission group name</argument>
		</arguments>
		<query>INSERT INTO USER_PERMISSIONS (USER_ID,PERMISSIONGROUP_ID)
VALUES ((SELECT USER_ID FROM USERS WHERE USERS.USERNAME = ?),
(SELECT PERMISSIONGROUP_ID FROM PERMISSION_GROUPS WHERE PERMISSION_GROUPS.PERMISSION_NAME = ?));</query>
	</preparedSql>
	<preparedSql name="RemoveUserPermission">
		<description>removes a user from an existing permission group</description>
		<arguments>
			<argument id="1">the permission group name</argument>
			<argument id="2">the username</argument>
		</arguments>
		<query>DELETE FROM USER_PERMISSIONS
WHERE PERMISSIONGROUP_ID = (SELECT PERMISSIONGROUP_ID FROM PERMISSION_GROUPS WHERE PERMISSION_GROUPS.PERMISSION_NAME = ?)
AND USER_ID = (SELECT USER_ID FROM USERS WHERE USERNAME = ?)</query>
	</preparedSql>
	<preparedSql name="DeletePermissionUsersByUser">
		<description>removes a user from all permission group</description>
		<arguments>
			<argument id="1">the user name</argument>
		</arguments>
		<query>DELETE FROM USER_PERMISSIONS
WHERE USER_ID = (SELECT USER_ID FROM USERS WHERE USERS.USERNAME = ?)</query>
	</preparedSql>
	<preparedSql name="DeletePermissionUsers">
		<description>removes all users from a given permission group</description>
		<arguments>
			<argument id="1">the permission group name</argument>
		</arguments>
		<query>DELETE FROM USER_PERMISSIONS
WHERE PERMISSIONGROUP_ID = (SELECT PERMISSIONGROUP_ID FROM PERMISSION_GROUPS WHERE PERMISSION_GROUPS.PERMISSION_NAME = ?)</query>
	</preparedSql>
</talnet>